/*
 * @(#)DownloadEvent.java	0.1 12/28/04
 *
 * Copyright 2004 Fabio Gasparetti. All rights reserved.
 */

package org.rm3umf.net.downloader;

import java.util.EventObject;
import java.lang.Exception;

/**
 * An event generated by the Downloader.
 * <p>
 * The event can represent one of the following conditions:
 * <ul>
 * <li>Download completed without error. The event's <code>Resource</code>
 * contains the meta-data and the downloaded object.
 * <li>If the <code>Queue</code> raises an exception, the event's resource is
 * <tt>null</tt> and an instance of <code>LinkDbException</code> is
 * associated to the current event.
 * <li>If an exception occured during the download, the event's resource is
 * completly empty but the <code>Resource.URL</code> meta-data. The event's
 * exception is one of the following:
 * <p>
 * <p>
 * <code>IllegalArgumentException</code>: when URI (in the queue or obtained
 * by redirection) is invalid
 * <p>
 * <code>IllegalStateException</code>: protocol of the absolute URI (in the
 * queue or obtained by redirection) is not recognised
 * <p>
 * <code>HttpException</code>: Signals that an HTTP or HttpClient exception
 * has occurred
 * <p>
 * <code>IOException</code>: an I/O (transport) error occurred
 * <p>
 * <p>
 * <li>If the max number of redirection has been reached, the event's resource
 * is completly empty but the <code>Resource.URL</code> and
 * <code>Resource.STATUS_CODE</code>, which is set to the last redirection code.
 * </ul>
 * 
 * @author Fabio Gasparetti
 * @version 0.1, 12/28/04
 */
public class DownloadEvent extends EventObject {
    protected ResourceDownloader resource = null;
    protected Exception exception = null;

    /**
     * 
     * @param source
     */
    public DownloadEvent(Object source) {
        super(source);
    }

    /**
     * 
     * @param source
     * @param res
     */
    public DownloadEvent(Object source, ResourceDownloader res) {
        super(source);
        resource = res;
    }

    /**
     * 
     * @param source
     * @param res
     * @param ex
     */
    public DownloadEvent(Object source, ResourceDownloader res, Exception ex) {
        super(source);
        resource = res;
        exception = ex;
    }

    /**
     * Returns the resource related to the downloaded object.
     * <p>
	 * Note: If the max number of redirection has been reached, the event's resource
	 * is completly empty but the <code>Resource.URL</code> and
	 * <code>Resource.STATUS_CODE</code>, which is set to the last redirection code.
     * 
     * @return
     */
    public ResourceDownloader getResource() {
        return resource;
    }

    /**
	 * Returns the exception associated with the occured downloading error.
	 * 
	 * The event's exception is one of the following:
	 * <ul>
	 * <li><code>LinkDbException</code>: If the downloader's <code>Queue</code> 
	 * raises an exception
	 * <li><code>IllegalArgumentException</code>: when URI (in the queue or
	 * obtained by redirection) is invalid
	 * <li><code>IllegalStateException</code>: protocol of the absolute URI (in
	 * the queue or obtained by redirection) is not recognised
	 * <li><code>HttpException</code>: Signals that an HTTP or HttpClient
	 * exception has occurred
	 * <li><code>IOException</code>: an I/O (transport) error occurred
	 * </ul>
	 * 
	 * @return Exception
	 */
    public Exception getException() {
        return exception;
    }
    
    public String toString() {
    	StringBuffer sb = new StringBuffer();
    	if (exception != null)
    		sb.append(" exception ["+ exception.toString()+"]");
    	if (resource != null)
    		sb.append(" resource ["+ resource.toString()+"]");    	
    	return sb.toString();
    }
}
